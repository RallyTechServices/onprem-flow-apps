<!DOCTYPE html>
<html>
<head>
    <title>Project Growth</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Dec 01 2014 18:26:44 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Dec 01 2014 18:26:44 GMT-0700 (MST)";
        var CHECKSUM = 12692817742;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this._getWorkspaces('projects').then({
            scope: this,
            success: function(histories){
                this.setLoading('Calculating...');
                this.logger.log("Found histories:", histories.length, histories);
                
                // 1.) Get an array of all the days between the first rev-hist and today (x-axis - categories)).
                var first_date = new Date(); // date = Fri Jan 02 2009 07:36:56 GMT-0700 (MST)
                var ws_name = 'WS Name here';
                Ext.Object.each(histories[0],function(key,history){
                    var revdate = history.revisions[0].get('CreationDate');
                    ws_name = history.record.get('Name');
                    if (revdate < first_date) {
                        first_date = revdate;
                    }
                });
                this.logger.log("First revision-history date = ",first_date);
                var array_of_days = Rally.technicalservices.util.Utilities.arrayOfDaysBetween(new Date(first_date),new Date(),false);
                this.logger.log("Total days covered = ",array_of_days);
                
                // 2.) Cycle thru the revisions and make a running count (y-axis - series)
                var count_hash = {};
                var counter = 1; // Allow for Rally's 'Sample' project which never shows up in rev hist.
                Ext.Array.each(array_of_days,function(day){
                    Ext.Object.each(histories[0],function(key,history){
                        Ext.Array.each(history.revisions,function(revision){
                            var revdate = revision.get('CreationDate');
                            if (revdate > day && revdate < Rally.util.DateTime.add(day,'day',+1)) {
                                counter++;
                            }
                        });
                       
                    });
                    count_hash[day] = counter;
                });
                var series_data = [];
                Ext.Object.each(count_hash,function(day,value){
                    series_data.push(value);
                });
                var series = {type:'area',name:ws_name,stack:1,data:series_data};
                
                // 3.) Make chart
                this.setLoading(false);
                this._makeChart(array_of_days,[series]);
            },
            failure: function(error_message){
                alert(error_message);
            }
        });
    },
    
    _makeChart: function(categories,serieses){
        this.logger.log('_makeChart');
        var formatted_categories = [];
        Ext.Array.each(categories,function(category){
            formatted_categories.push(Ext.util.Format.date(category,'Y-m-d'));
        });
        this.down('#display_box').add({
            xtype:'rallychart',
            chartData: {
                series: serieses
            },
            chartConfig: {
                chart: {},
                title: {
                    text: 'Cumulative Project Creation',
                    align: 'center'
                },
                yAxis: [{ title: { text: 'Count' } }],
                xAxis: [{
                    tickmarkPlacement: 'on',
                    tickInterval: 56,
                    categories:  formatted_categories,
                    labels: {
                        align: 'left',
                        rotation: 70
                    }
                }],
                plotOptions: {
                    series: {
                        marker: { enabled: false },
                        stacking: 'normal'
                    }
                }
            }
        });
    },
        
    _getWorkspaces: function(state_field){
        var deferred = Ext.create('Deft.Deferred');
        this.setLoading('Get WS data...');
        var model = 'Workspace';
        var me = this;
        this.logger.log("Getting ", model, ".", state_field);
        
        //var state_field_name = state_field;

        Ext.create('Rally.data.wsapi.Store', {
            model: model,
            fetch: ['Name','ObjectID','RevisionHistory'],
            limit: 600,
            autoLoad: true,
            listeners: {
                scope: this,
                load: function(store, records, successful) {
                    if (successful){
                        this.logger.log("Found workspaces:", records.length, records);
                        var promises = [];
                        Ext.Array.each(records,function(record){
                            var p = function(){
                                return me._getHistoryForRecord(record,state_field);
                            }
                            promises.push(p);
                        },this);
                        
                        //this.logger.log("Executing ", promises.length, " promises");
                        Deft.Chain.parallel(promises).then({
                            success: function(histories) {
                                deferred.resolve(histories);
                            },
                            failure: deferred.reject
                        });
                        
                    } else {
                        deferred.reject('Failed to load store for model [' + model + ']');
                    }
                }
            }
        });
        return deferred.promise;
    },
    
    _getHistoryForRecord: function(record,state_field) {
        var deferred = Ext.create('Deft.Deferred');
        this.setLoading('Get Revision data...');
        this.logger.log('getting history for ', record.get('Name'));
        
        // contains searches are case insensitive, so 
        // TODO: deal with possibility that the name of the field is in the description change
        //       without changing the field itself (like in the name or something)
        var state_selection_filters = Ext.create('Rally.data.wsapi.Filter',{
            property:'Description', 
            operator:'contains',
            value: Ext.util.Format.uppercase(state_field)
        }).or(Ext.create('Rally.data.wsapi.Filter',{
            property:'Description', 
            operator:'contains',
            value: 'Added project '}));
        
        var rev_history_filter = Ext.create('Rally.data.wsapi.Filter',{
            property:"RevisionHistory.ObjectID",
            value: record.get('RevisionHistory').ObjectID
        });
        
        var filters = rev_history_filter.and(state_selection_filters);
        // use a regular wsapi store instead of loading the collection because I'm having
        // trouble with getting the collection to recognize the filters.
        Ext.create('Rally.data.wsapi.Store',{
            autoLoad: true,
            model:'Revision',
            filters: filters,
            limit: 'Infinity',
            fetch: ['Description','CreationDate'],
            sorters: [{property:'CreationDate',direction:'ASC'}],
            listeners: {
                scope: this,
                load: function(store,revisions){
                    //this.logger.log('revs for ', record.get('FormattedID'), ':',revisions);
                    var rev_hash = {};
                    var matching_revs = [];
                    Ext.Array.each(revisions,function(rev){
                        var description = rev.get('Description');
                        var parsed_result = Rally.technicalservices.util.Parser.findValuesForField('projects', description);
                        if (parsed_result.new_value != null) {
                            matching_revs.push(rev);
                        }
                    });
                    if ( matching_revs.length > 1 ) {
                        rev_hash[record.get('ObjectID')] = {record: record, revisions: matching_revs};
                    }
                    deferred.resolve(rev_hash);
                }
            }
        });

        return deferred.promise;        
    }
});
Ext.define('Rally.technicalservices.util.Parser', {
    singleton: true,
    /*
     * Read through a text string to find the old and new values
     * for a field that changed
     * 
     * {String} field_name, the name of the field that has a change
     * {String} text_string, the string to test (usually the description of a revision)
     * 
     * returns a hash with three keys: 
     * 
     * description: {String} the text_string that was passed in
     * original_value: {String} the value that the field had before the change happened
     * new_value: {String} the value the field changed into
     */
    findValuesForField: function(field_name, text_string){
        var description = text_string;
        var new_value = null;
        var original_value = null;
        
        // looking for "..., FIELD changed from [old] to [new], ..."
        var regex = new RegExp( Ext.util.Format.uppercase(field_name) + " changed from \\[(.*?)\\] to \\[(.*?)\\]" );
        var matches = this._getMatches(text_string, regex);

        if ( matches.length > 0 ) { original_value = matches[0]; }
        if ( matches.length > 1 ) { new_value = matches[1]; }
        
        if ( original_value === null && new_value === null ) {
            // maybe the format is like
            // FIELD added [new]
            regex = new RegExp( Ext.util.Format.uppercase(field_name) + " added \\[(.*?)\\]" );
            matches = this._getMatches(text_string, regex);
    
            if ( matches.length > 0 ) { 
                new_value = matches[0]; 
                original_value = "";
            }
        }
        
        if ( original_value === null && new_value === null && Ext.util.Format.uppercase(field_name) == 'PROJECTS') {
            // Handle a revision entry on demo-west (Jan-2009): "Added project Project 3"
            regex = new RegExp( "^Added project (.*)$" );
            matches = this._getMatches(text_string, regex);

            if ( matches.length > 0 ) {
                new_value = matches[0];
                original_value = "";
            }
        }
        
        return {
            description: text_string,
            new_value: new_value,
            original_value: original_value
        };
    },
    
    /**
     * given an array of revision objects, find the first revision that changed to the first state and the last
     * revision that changed to the last state
     * 
     * return a two-value array (two revisions) or an empty array (if neither or only one state revision is found)
     */
    findEntryExitRevisions: function(revision_array, field_name, start_state, end_state) {
        var matching_revisions = [];
        var start_revision = null;
        var end_revision = null;
        
        Ext.Array.each( revision_array, function(revision){
            var values = this.findValuesForField(field_name, revision.get('Description'));
            
            if ( !start_revision && values.new_value == start_state ) {
                start_revision = revision;
            }
            
            if ( values.new_value == end_state ) {
                end_revision = revision;
            }
        },this);
        
        if ( end_revision && ! start_revision) {
            // we got to the end without seeing the start.  
            // if the first rev is the original then let's assume it was our start
            if ( revision_array[0].get('Description') == "Original revision" ){
                start_revision = revision_array[0];
            }
        }
        
        if ( start_revision && end_revision ) {
            matching_revisions = [ start_revision, end_revision];
        }
        
        return matching_revisions;
    },
    
    /*
     * Given an array of revisions and a field name that holds the state,
     * find all the state transitions and return an array of objects
     * representing the entry into states for that array.
     */
    getStateAttainments: function(revision_array, field_name) {
        var transitions = [];
        
        var first_date = null;
        var first_value = null;
        
        Ext.Array.each( revision_array, function(revision, index){
            var description = revision.get('Description');
            // find original revision if passed

            var values = this.findValuesForField(field_name, description);
            if ( values.new_value !== null ) {
                transitions.push({ 
                    change_date: revision.get('CreationDate'),
                    state: values.new_value 
                });
                // push original value back to start if we don't have one
                // and if this isn't the first one (starting right into the state)
                if ( values.original_value !== null && first_value === null ) {
                    first_value = values.original_value;
                }
            } else if ( index == 0 ) { 
                first_date = revision.get('CreationDate');
            }
            
        },this);
        
        if ( first_date && first_value ) {
            transitions.unshift({
                change_date: first_date,
                state: first_value 
            });
        }
        
        return transitions;
    },
    /*
     * Provide a hash with a key for each day between first and end; value of
     * each is a hash with keys for each state value that has items -- the value
     * of each of these is an array of the items that are in that state (so we let
     * some other function determine value however it wants)
     * 
     * Input an array of items that have a field called _changes (from getStateAttainments)
     */
    getCumulativeFlow: function(item_array, first_date, end_date){
        var flow = {};
        
        var check_date = first_date;
        
        var preceding_day_values_by_item_id = {};
        
        while (check_date <= end_date ) {
            flow[check_date] = {};
            
            Ext.Array.each(item_array,function(item){
                var preceding_date = Rally.util.DateTime.add(check_date,'day',-1);
                var state = this._getStateBetween(preceding_date,check_date,item);
                if ( state ) {
                    preceding_day_values_by_item_id[item.get('ObjectID')] = state;
                } else if ( preceding_day_values_by_item_id[item.get('ObjectID')]) {
                    var state = preceding_day_values_by_item_id[item.get('ObjectID')];
                }
                                
                if ( state ) {
                    if ( ! flow[check_date][state] ) {
                        flow[check_date][state] = [];
                    }
                    
                    flow[check_date][state].push(item);
                }
            },this);
            
            check_date = Rally.util.DateTime.add(check_date,'day',1);
        }
        
        return flow;
    },
    /*
     * expect an item to have a _changes field (from getStateAttainments)
     * 
     */
    _getStateBetween: function (preceding_date,check_date,item){
        var state = null;
        var changes = item.get('_changes');
        
        Ext.Array.each(changes, function(change){
            var change_date = change.change_date;
            if ( change_date > preceding_date && change_date <= check_date ) {
                state = change.state;
            }
        });
        return state;
    },
    _getMatches: function(string, regex, index) {
        var matches = [];
        var all_matches = regex.exec(string);
        if ( Ext.isArray(all_matches) ) {
            for ( var i=1;i<all_matches.length;i++){
                matches.push(all_matches[i]);
            }
        }
        return matches;
    }
});
Ext.define('Rally.technicalservices.util.Utilities', {
    singleton: true,
    hashToArray: function(hash) {
        var result = [];
        for ( var key in hash ) {
            result.push(hash[key]);
        }
        return result;
    },
    daysBetween: function(begin_date_js,end_date_js,skip_weekends){

        if ( typeof(begin_date_js) == "string" ) {
            begin_date_js = Rally.util.DateTime.fromIsoString(begin_date_js);
        }
        if ( typeof(end_date_js) == "string" ) {
            end_date_js = Rally.util.DateTime.fromIsoString(end_date_js);
        }
        
        var dDate1 = Ext.clone(begin_date_js).setHours(0,0,0,0);
        var dDate2 = Ext.clone(end_date_js).setHours(0,0,0,0);
        
        if ( dDate1 == dDate2 ) { return 0; }
        if (typeof dDate1 === "number") { dDate1 = new Date(dDate1); }
        if (typeof dDate2 === "number") { dDate2 = new Date(dDate2); }
            
        if ( !skip_weekends ) {
            return Math.abs( Rally.util.DateTime.getDifference(dDate1,dDate2,'day') );
        } else {
            // shift to the following Monday
            if (!this.isWeekday(dDate1)) {
                dDate1 = this.shiftDateToMonday(dDate1);
            }
            if (!this.isWeekday(dDate2)) {
                dDate2 = this.shiftDateToMonday(dDate2);
            }


            // from the sOverflow
            var iWeeks, iDateDiff, iAdjust = 0;
            if (dDate2 < dDate1) 
            { 
                var x = dDate2;
                dDate2 = dDate1;
                dDate1 = x;
            }
            var iWeekday1 = dDate1.getDay(); // day of week
            var iWeekday2 = dDate2.getDay();
            iWeekday1 = (iWeekday1 == 0) ? 7 : iWeekday1; // change Sunday from 0 to 7
            iWeekday2 = (iWeekday2 == 0) ? 7 : iWeekday2;
            if ((iWeekday1 > 5) && (iWeekday2 > 5)) iAdjust = 1; // adjustment if both days on weekend
            iWeekday1 = (iWeekday1 > 5) ? 5 : iWeekday1; // only count weekdays
            iWeekday2 = (iWeekday2 > 5) ? 5 : iWeekday2;
    
            // calculate differnece in weeks (1000mS * 60sec * 60min * 24hrs * 7 days = 604800000)
            iWeeks = Math.floor((dDate2.getTime() - dDate1.getTime()) / 604800000)
    
            if (iWeekday1 <= iWeekday2) {
              iDateDiff = (iWeeks * 5) + (iWeekday2 - iWeekday1)
            } else {
              iDateDiff = ((iWeeks + 1) * 5) - (iWeekday1 - iWeekday2)
            }
    
            iDateDiff -= iAdjust // take into account both days on weekend
    
            if ( iDateDiff < 0 ) { iDateDiff = 0; }
            return (iDateDiff); 
        }
    },

    isWeekday: function(check_date) {
        var weekday = true;
        var day = check_date.getDay();
        
        if ( day === 0 || day === 6 ) {
            weekday = false;
        }
        return weekday;
    },
    shiftDateToMonday: function(check_date) {
        var day = check_date.getDay();
        
        var delta = 0;
        
        if ( day === 0 ) {
            // it's Sunday
            delta = 1;
        }
        if ( day === 6 ) {
            delta = 2;
        }
        
        var shifted_date = check_date;
        if ( delta > 0 ) {
            shifted_date = new Date(check_date.setHours(0));
            shifted_date = Rally.util.DateTime.add(shifted_date,"day",delta);
        }
        console.log("Shifting from ", check_date, " to ", shifted_date, " (", delta, ")");
        return shifted_date;
    },
    /*
     * compress size is the point at which to move to weeks instead of days
     */
    arrayOfDaysBetween: function(begin_date_js, end_date_js, skip_weekends, compress_size ) {
        var the_array = [];
        if ( typeof(begin_date_js) == "string" ) {
            begin_date_js = Rally.util.DateTime.fromIsoString(begin_date_js);
        }
        if ( typeof(end_date_js) == "string" ) {
            end_date_js = Rally.util.DateTime.fromIsoString(end_date_js);
        }
        if ( begin_date_js > end_date_js ) {
            var swap_holder = end_date_js;
            end_date_js = begin_date_js;
            begin_date_js = swap_holder;
        }
                
        var dDate1 = Ext.clone(begin_date_js).setHours(0,0,0,0);
        var dDate2 = Ext.clone(end_date_js).setHours(0,0,0,0);
        
        var number_of_days = this.daysBetween(begin_date_js,end_date_js,skip_weekends);
        
        var add_value = 1;
        var add_unit = 'day';
        
        if ( Ext.isNumber(compress_size) && number_of_days > compress_size ) {
            add_value = 7;
        }
        
        if ( number_of_days <= 2 ) {
            add_value = 30;
            add_unit = 'minute';
            dDate2 = Ext.clone(end_date_js).setHours(23,59,0,0);
        }
       
        
        var check_date = new Date(dDate1);
        
        while (check_date <= dDate2) {
            if ( !skip_weekends || this.isWeekday(check_date) || add_value === 7 || add_unit == 'minute' ) {
                the_array.push(check_date);
            }
            check_date = Rally.util.DateTime.add(check_date,add_unit,add_value);
        }
        
        return the_array;
    }
    
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Project Growth'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>